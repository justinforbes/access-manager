@{
    ViewBag.Title = UIMessages.HeadingPasswordDetails;
}

@model Lithnet.AccessManager.Service.Models.CurrentPasswordModel
@inject Lithnet.AccessManager.Server.IPhoneticPasswordTextProvider textProvider;
@inject Lithnet.AccessManager.Service.IHtmlPasswordProvider htmlProvider;
@inject Microsoft.Extensions.Options.IOptionsSnapshot<Lithnet.AccessManager.Server.Configuration.UserInterfaceOptions> uiOptions;

<div class="form-container">

    <div class="form-content-header">
        @UIMessages.HeadingPasswordDetails
    </div>

    <div class="form-content">
        <section class="form-computer-details">
            <label class="title">Computer</label>
            <p class="lead">@Model.ComputerName</p>

            <div class="dropdown font-options-button">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Display options
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenu2" style="">
                    <button class="dropdown-item" id="button-monochrome" type="button">Monochrome</button>
                    <button class="dropdown-item" id="button-large-font" type="button">Larger font</button>
                    <button class="dropdown-item" id="button-increase-spacing" type="button">Increase spacing</button>
                </div>
            </div>
        </section>

        <div class="card">
            <div class="card-header password-details-title">
                Password valid until <span data-aspnet-utc-time="@(uiOptions.Value.ShowDatesInServerTimeZone ? null : Model.ValidUntil.ToUnixEpochMilliseconds())">@Model.ValidUntil</span>
            </div>
            <div class="card-body">
                <div class="password-content password-font-size-normal password-font-spacing-normal notranslate" id="password-content-1">
                    @Html.Raw(htmlProvider.GetHtmlPassword(Model.Password))
                </div>
                @if (!uiOptions.Value.PhoneticSettings.HidePhoneticBreakdown)
                {
                    <div id="password-phonetic-1" class="collapse phonetic-items notranslate">
                        <div class="input-group">
                            @foreach (string w in textProvider.GetPhoneticTextSections(Model.Password))
                            {
                                @w<br />
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="card-footer password-details-footer">
                <button id="copy-button" type="button"
                        class="btn btn-outline-secondary clipboard-copy-button"
                        data-clipboard-text="@Model.Password">
                    Copy Password
                </button>
                @if (!uiOptions.Value.PhoneticSettings.HidePhoneticBreakdown)
                {
                    <button id="buttonShowPhonetic" type="button" data-toggle="collapse"
                            class="btn btn-outline-secondary" data-target="#password-phonetic-1"
                            aria-expanded="true">
                        Show Phonetic
                    </button>
                }

                @if (!uiOptions.Value.PhoneticSettings.DisableTextToSpeech)
                {
                    <button type="button" data-toggle="button"
                            class="btn btn-outline-secondary speech-button" speech-data="@textProvider.GetPhoneticText(Model.Password)">
                        Read aloud
                    </button>
                }
            </div>
        </div>

        <footer>
            @Html.ActionLink(UIMessages.ButtonNewRequest, "AccessRequest", "Computer", null, new { @class = "btn btn-outline-secondary" })
        </footer>
    </div>
</div>

@section Scripts {
    <script src="@Url.Content("~/js/password-display-options.js")"></script>

    @if (!uiOptions.Value.PhoneticSettings.DisableTextToSpeech)
    {
        <script src="@Url.Content("~/js/speech.js")"></script>
    }
}